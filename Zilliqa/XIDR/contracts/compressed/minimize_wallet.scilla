scilla_version 0

import ListUtils IntUtils BoolUtils

library WalletLib

let mk_contract_initialized_event =
{ _eventname : "Contract initialized" }

let mk_transaction_added_event =
fun (tc : Uint32) =>
{ _eventname : "Transaction created" ;
transactionId : tc }

let mk_signed_transaction_event =
fun (tc : Uint32) =>
{ _eventname : "Transaction signed"; transactionId : tc }

let mk_signature_revoked_event =
fun (tc : Uint32) =>
{ _eventname : "Signature revoked"; transactionId : tc }

type Error =
| NonOwnerCannotSign
| UnknownTransactionId
| InsufficientFunds
| NoSignatureListFound
| AlreadySigned
| NotAlreadySigned
| InvalidContract
| InvalidAmount
| NotEnoughSignatures
| SenderMayNotExecute
| NonOwnerCannotSubmit
| IncorrectSignatureCount

let make_error =
fun (err : Error) =>
let err_code =
match err with
| NonOwnerCannotSign        => Int32 -1
| UnknownTransactionId      => Int32 -2
| InsufficientFunds         => Int32 -3
| NoSignatureListFound      => Int32 -4
| AlreadySigned             => Int32 -5
| NotAlreadySigned          => Int32 -6
| InvalidContract           => Int32 -7
| InvalidAmount             => Int32 -8
| NotEnoughSignatures       => Int32 -9
| SenderMayNotExecute       => Int32 -10
| NonOwnerCannotSubmit      => Int32 -11
| IncorrectSignatureCount   => Int32 -12
end in
{ _exception : "Error" ; err_code : err_code }

let t = True
let f = False
let zero = Uint32 0
let one = Uint32 1
let transaction_inc = one

type TokenTransaction =
| TransferOwnership of ByStr20
| UpdatePauser of ByStr20
| Blacklist of ByStr20
| Unblacklist of ByStr20
| UpdateBlacklister of ByStr20
| LawEnforcementWipingBurn of ByStr20
| UpdateMasterMinter of ByStr20
| IncreaseMinterAllowance of ByStr20 Uint128
| DecreaseMinterAllowance of ByStr20 Uint128
| Pause
| Unpause
| UpgradeTo of ByStr20
| ChangeAdmin of ByStr20
| Transfer of ByStr20 Uint128
| TransferFrom of ByStr20 ByStr20 Uint128
| Burn of Uint128
| Mint of ByStr20 Uint128

type Transaction =
| NativeTransaction of ByStr20 Uint128 String
| CustomTokenTransaction of ByStr20 TokenTransaction


let mk_owners_map =
fun (owners : List ByStr20) =>
let init = Emp ByStr20 Bool in
let iter =
fun (acc : Map ByStr20 Bool) =>
fun (cur_owner : ByStr20) =>
builtin put acc cur_owner t
in
let folder = @list_foldl ByStr20 (Map ByStr20 Bool) in
folder iter init owners

let one_msg =
fun (msg : Message) =>
let nil_msg = Nil {Message} in
Cons {Message} msg nil_msg

let native_transaction_msg_as_list =
fun (recipient : ByStr20) =>
fun (amount : Uint128) =>
fun (tag : String) =>
let msg = {_tag : tag; _recipient : recipient; _amount : amount } in
one_msg msg

let custom_token_transaction_msg_as_list =
fun (proxyTokenContract : ByStr20) =>
fun (tokenTransaction : TokenTransaction) =>
let msg =
match tokenTransaction with
| TransferOwnership newOwner =>
{_recipient : proxyTokenContract ;
_tag : "TransferOwnership" ;
_amount : Uint128 0 ;
newOwner : newOwner }
| UpdatePauser newPauser =>
{_recipient : proxyTokenContract ;
_tag : "UpdatePauser" ;
_amount : Uint128 0 ;
newPauser : newPauser }
| Blacklist address =>
{_recipient : proxyTokenContract ;
_tag : "Blacklist" ;
_amount : Uint128 0 ;
address : address }
| Unblacklist address =>
{_recipient : proxyTokenContract ;
_tag : "Unblacklist" ;
_amount : Uint128 0 ;
address : address }
| UpdateBlacklister newBlacklister =>
{_recipient : proxyTokenContract ;
_tag : "UpdateBlacklister" ;
_amount : Uint128 0 ;
newBlacklister : newBlacklister }
| LawEnforcementWipingBurn address =>
{_recipient : proxyTokenContract ;
_tag : "LawEnforcementWipingBurn" ;
_amount : Uint128 0 ;
address : address }
| UpdateMasterMinter newMasterMinter =>
{_recipient : proxyTokenContract ;
_tag : "UpdateMasterMinter" ;
_amount : Uint128 0 ;
newMasterMinter : newMasterMinter }
| IncreaseMinterAllowance minter amount =>
{_recipient : proxyTokenContract ;
_tag : "IncreaseMinterAllowance" ;
_amount : Uint128 0 ;
minter : minter ;
amount : amount }
| DecreaseMinterAllowance minter amount =>
{_recipient : proxyTokenContract ;
_tag : "DecreaseMinterAllowance" ;
_amount : Uint128 0 ;
minter : minter ;
amount : amount }
| Pause =>
{_recipient : proxyTokenContract ;
_tag : "Pause" ;
_amount : Uint128 0 }
| Burn amount =>
{_recipient : proxyTokenContract ;
_tag : "Burn" ;
_amount : Uint128 0 ;
amount : amount }
| Mint recipient amount =>
{_recipient : proxyTokenContract ;
_tag : "Mint" ;
_amount : Uint128 0 ;
recipient : recipient ;
amount : amount }
| Transfer to amount =>
{_recipient : proxyTokenContract ;
_tag : "Transfer" ;
_amount : Uint128 0 ;
to : to ;
amount : amount }
| TransferFrom from to amount =>
{_recipient : proxyTokenContract ;
_tag : "TransferFrom" ;
_amount : Uint128 0 ;
from : from ;
to : to ;
amount : amount }
| Unpause =>
{_recipient : proxyTokenContract ;
_tag : "Unpause" ;
_amount : Uint128 0 }
| UpgradeTo newImplementation =>
{_recipient : proxyTokenContract ;
_tag : "UpgradeTo" ;
_amount : Uint128 0 ;
newImplementation : newImplementation }
| ChangeAdmin newAdmin =>
{_recipient : proxyTokenContract ;
_tag : "ChangeAdmin" ;
_amount : Uint128 0 ;
newAdmin : newAdmin }
end
in
one_msg msg

contract Wallet
(
owners_list         : List ByStr20,
required_signatures : Uint32
)
with
let len = @list_length ByStr20 in
let no_of_owners = len owners_list in
let owners_ok = builtin lt zero no_of_owners in
let required_sigs_not_too_low = builtin lt zero required_signatures in
let required_sigs_too_high = builtin lt no_of_owners required_signatures in
let required_sigs_not_too_high = negb required_sigs_too_high in
let required_sigs_ok = andb required_sigs_not_too_high required_sigs_not_too_low in
let all_ok = andb required_sigs_ok owners_ok in
match all_ok with
| True =>
let owners_map = mk_owners_map owners_list in
let size_of_owners_map = builtin size owners_map in
builtin eq size_of_owners_map no_of_owners
| False =>
False
end
=>

field owners           : Map ByStr20 Bool = mk_owners_map owners_list

field transactionCount : Uint32 = Uint32 0

field signatures       : Map Uint32 (Map ByStr20 Bool) =
Emp Uint32 (Map ByStr20 Bool)

field signature_counts : Map Uint32 Uint32 =
Emp Uint32 Uint32

field transactions     : Map Uint32 Transaction =
Emp Uint32 Transaction

procedure ThrowError(err : Error)
e = make_error err;
throw e
end

procedure AddSignature (transactionId : Uint32, signee : ByStr20)
sig <- exists signatures[transactionId][signee];
match sig with
| False =>
count <- signature_counts[transactionId];
match count with
| None =>
signature_counts[transactionId] := one
| Some c =>
new_c = builtin add c one;
signature_counts[transactionId] := new_c
end;
signatures[transactionId][signee] := t;
e = mk_signed_transaction_event transactionId;
event e
| True =>
err = AlreadySigned;
ThrowError err
end
end

procedure SubmitTransaction (transaction : Transaction)
sender_is_owner <- exists owners[_sender];
match sender_is_owner with
| False =>
err = NonOwnerCannotSubmit;
ThrowError err
| True =>
tc <- transactionCount;
transactions[tc] := transaction;
AddSignature tc _sender;
tc_new = builtin add tc transaction_inc;
transactionCount := tc_new;
e = mk_transaction_added_event tc;
event e
end
end

transition SubmitNativeTransaction (recipient : ByStr20, amount : Uint128, tag : String)
zero = Uint128 0;
amount_is_zero = builtin eq amount zero;
match amount_is_zero with
| True =>
err = InvalidAmount;
ThrowError err
| False =>
transaction = NativeTransaction recipient amount tag;
SubmitTransaction transaction
end
end

procedure SubmitCustomTransaction (proxyTokenContract : ByStr20, tokenTransaction : TokenTransaction)
transaction = CustomTokenTransaction proxyTokenContract tokenTransaction;
SubmitTransaction transaction
end

transition SubmitCustomTransferOwnershipTransaction (proxyTokenContract : ByStr20, newOwner : ByStr20)
transaction = TransferOwnership newOwner;
SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomUpdatePauserTransaction (proxyTokenContract : ByStr20, newPauser : ByStr20)
transaction = UpdatePauser newPauser;
SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomBlacklistTransaction (proxyTokenContract : ByStr20, address : ByStr20)
transaction = Blacklist address;
SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomUnblacklistTransaction (proxyTokenContract : ByStr20, address : ByStr20)
transaction = Unblacklist address;
SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomUpdateBlacklisterTransaction (proxyTokenContract : ByStr20, newBlacklister : ByStr20)
transaction = UpdateBlacklister newBlacklister;
SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomLawEnforcementWipingBurnTransaction (proxyTokenContract : ByStr20, address : ByStr20)
transaction = LawEnforcementWipingBurn address;
SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomBurnTransaction (proxyTokenContract : ByStr20, amount : Uint128)
transaction = Burn amount;
SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomMintTransaction (proxyTokenContract : ByStr20, to : ByStr20, amount : Uint128)
transaction = Mint to amount;
SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomTransferTransaction (proxyTokenContract : ByStr20, to : ByStr20, amount : Uint128)
transaction = Transfer to amount;
SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomTransferFromTransaction (proxyTokenContract : ByStr20, from : ByStr20, to : ByStr20, amount : Uint128)
transaction = TransferFrom from to amount;
SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomUpdateMasterMinterTransaction (proxyTokenContract : ByStr20, newMasterMinter : ByStr20)
transaction = UpdateMasterMinter newMasterMinter;
SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomIncreaseMinterAllowanceTransaction (proxyTokenContract : ByStr20, minter : ByStr20, amount : Uint128)
transaction = IncreaseMinterAllowance minter amount;
SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomDecreaseMinterAllowanceTransaction (proxyTokenContract : ByStr20, minter : ByStr20, amount : Uint128)
transaction = DecreaseMinterAllowance minter amount;
SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomPauseTransaction (proxyTokenContract : ByStr20)
transaction = Pause;
SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomUnpauseTransaction (proxyTokenContract : ByStr20)
transaction = Unpause;
SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomUpgradeToTransaction (proxyTokenContract : ByStr20, newImplementation : ByStr20)
transaction = UpgradeTo newImplementation;
SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomChangeAdminTransaction (proxyTokenContract : ByStr20, newAdmin : ByStr20)
transaction = ChangeAdmin newAdmin;
SubmitCustomTransaction proxyTokenContract transaction
end


transition SignTransaction (transactionId : Uint32)
sender_is_owner <- exists owners[_sender];
match sender_is_owner with
| False =>
err = NonOwnerCannotSign;
ThrowError err
| True =>
transaction <- transactions[transactionId];
match transaction with
| None =>
err = UnknownTransactionId;
ThrowError err
| Some _ =>
AddSignature transactionId _sender
end
end
end

transition RevokeSignature (transactionId : Uint32)
sig <- exists signatures[transactionId][_sender];
match sig with
| False =>
err = NotAlreadySigned;
ThrowError err
| True =>
count <- signature_counts[transactionId];
match count with
| None =>
err = IncorrectSignatureCount;
ThrowError err
| Some c =>
c_is_zero = builtin eq c zero;
match c_is_zero with
| True =>
err = IncorrectSignatureCount;
ThrowError err
| False =>
new_c = builtin sub c one;
signature_counts[transactionId] := new_c;
delete signatures[transactionId][_sender];
e = mk_signature_revoked_event transactionId;
event e
end
end
end
end

procedure DeleteTransaction (transactionId : Uint32)
delete transactions[transactionId];
delete signatures[transactionId];
delete signature_counts[transactionId]
end

procedure ExecuteNativeTransaction (recipient : ByStr20, amount : Uint128, tag : String)
recipient_is_sender = builtin eq recipient _sender;
sender_is_owner <- exists owners[_sender];
sender_may_execute = orb recipient_is_sender sender_is_owner;
match sender_may_execute with
| False =>
err = SenderMayNotExecute;
ThrowError err
| True =>
bal <- _balance;
not_enough_money = builtin lt bal amount;
match not_enough_money with
| True =>
err = InsufficientFunds;
ThrowError err
| False =>
msgs = native_transaction_msg_as_list recipient amount tag;
send msgs
end
end
end

procedure ExecuteCustomTokenTransaction (proxyTokenContract : ByStr20, tokenTransaction : TokenTransaction)
sender_is_owner <- exists owners[_sender];
match sender_is_owner with
| False =>
err = SenderMayNotExecute;
ThrowError err
| True =>
as_msg = custom_token_transaction_msg_as_list proxyTokenContract tokenTransaction;
send as_msg
end
end

transition ExecuteTransaction (transactionId : Uint32)
transaction_opt <- transactions[transactionId];
match transaction_opt with
| None =>
err = UnknownTransactionId;
ThrowError err
| Some transaction =>
sig_count_opt <- signature_counts[transactionId];
match sig_count_opt with
| None =>
err = NoSignatureListFound;
ThrowError err
| Some sig_count =>
not_enough_signatures = builtin lt sig_count required_signatures;
match not_enough_signatures with
| True =>
err = NotEnoughSignatures;
ThrowError err
| False =>
match transaction with
| NativeTransaction recipient amount tag =>
ExecuteNativeTransaction recipient amount tag
| CustomTokenTransaction proxyTokenContract tokenTransaction =>
ExecuteCustomTokenTransaction proxyTokenContract tokenTransaction
end;
DeleteTransaction transactionId
end
end
end
end

transition AddFunds ()
accept
end

transition TransferSuccessCallBack (sender : ByStr20, recipient : ByStr20, amount : Uint128)
end

transition RecipientAcceptTransfer (sender : ByStr20, recipient : ByStr20, amount : Uint128)
end

transition TransferFromSuccessCallBack (initiator: ByStr20, sender : ByStr20, recipient : ByStr20, amount : Uint128)
end

transition MintSuccessCallBack (recipient : ByStr20, amount : Uint128)
end

transition LawEnforcementWipingBurnSuccessCallBack (address : ByStr20)
end

transition BurnSuccessCallBack (sender : ByStr20, amount : Uint128)
end

transition RecipientAcceptTransferFrom (initiator: ByStr20, sender : ByStr20, recipient : ByStr20, amount : Uint128)
end

transition RecipientAcceptMint (recipient : ByStr20, amount : Uint128)
end
