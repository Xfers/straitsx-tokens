require("dotenv").config()

// INFURA Setup - see validate/README.validate.md for more info
const HD_WALLET_PROVIDER = require("truffle-hdwallet-provider"); // These keys will be used only for CALL
const DEPLOYER_MNEMONIC = process.env.DEPLOYER_MNEMONIC;
const ACCESS_TOKEN = process.env.ACCESS_TOKEN;

module.exports = {
  // See <http://truffleframework.com/docs/advanced/configuration>
  // to customize your Truffle configuration!
  compilers: {
    solc: {
      version: "0.4.24",
      settings: {
        optimizer: {
          enabled: true,
        },
      }
    }
  },
  networks: {
    development: {
      // provider: Use mnemonic generated by ganache
      host: "localhost",
      port: 8545,
      network_id: "*" // Match any network id
    },
    // solidity-coverage looks for a network called 'coverage' and makes one
    // identical to this one if it is not found. We want solidity coverage to
    // accept this truffle.js file as valid so it will use our custom reporter,
    // so we add the 'coverage' network manually here.
    coverage: {
      host: "localhost",
      network_id: "*",
      port: 8555,
      gas: 17592186044415,
      gasPrice: 1
    },
    // INFURA Setup
    infura_mainnet: {
      provider: function() {
         return new HD_WALLET_PROVIDER(DEPLOYER_MNEMONIC, `https://mainnet.infura.io/v3/${ACCESS_TOKEN}`, 0, 10);
      },
      network_id: 1
    },
    // ROPSTEN INFURA Setup
    infura_ropsten: {
      provider: function() {
        return new HD_WALLET_PROVIDER(DEPLOYER_MNEMONIC, `https://ropsten.infura.io/v3/${ACCESS_TOKEN}`, 0, 10)
      },
      gas: 4500000, // Current Ropsten gas limit. See https://ropsten.etherscan.io/block/3141628
      gasPrice: 1100000000, // 1.1 GWei - based on the lower end of current txs getting into blocks currently on Ropsten.
      network_id: 3
    }
  },
  mocha: {
    /*
    * To disable the spreadsheet verification tool ensure that
    * the reporter is set to 'Spec' by commenting/uncommenting the lines below.
    */
    reporter: 'Spec',
    //reporter: './verification/verification_reporter.js',
  },
};

